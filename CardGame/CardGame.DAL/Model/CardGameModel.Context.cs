//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CardGame.DAL.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class itin21_ClonestoneFSEntities : DbContext
    {
        public itin21_ClonestoneFSEntities()
            : base("name=itin21_ClonestoneFSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Card> AllCards { get; set; }
        public virtual DbSet<CardClass> AllCardClasses { get; set; }
        public virtual DbSet<UserCardCollection> AllUserCardCollections { get; set; }
        public virtual DbSet<Deck> AllDecks { get; set; }
        public virtual DbSet<DeckCard> AllDeckCards { get; set; }
        public virtual DbSet<Purchase> AllPurchases { get; set; }
        public virtual DbSet<Pack> AllPacks { get; set; }
        public virtual DbSet<User> AllUsers { get; set; }
        public virtual DbSet<CardType> AllCardTypes { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<PackDiscount> AllDiscounts { get; set; }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<pGetTop5Customers_Result> pGetTop5Customers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pGetTop5Customers_Result>("pGetTop5Customers");
        }
    
        public virtual ObjectResult<pGetTop5CustomersEmail_Result> pGetTop5CustomersEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pGetTop5CustomersEmail_Result>("pGetTop5CustomersEmail");
        }
    
        public virtual ObjectResult<pGetTop5Sellers_Result> pGetTop5Sellers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pGetTop5Sellers_Result>("pGetTop5Sellers");
        }
    }
}
